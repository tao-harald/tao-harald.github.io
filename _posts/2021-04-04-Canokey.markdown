---
layout: post
title:  "Use Canokey to secure your digital life"
categories: Tech
---

I'm using [Canokey(STM32)](https://github.com/canokeys/canokey-stm32) to secure my account and data.

## Hardware

I'm using [NUCLEO-L432KC](https://os.mbed.com/platforms/ST-Nucleo-L432KC/) development board with USB breakout [^1] .
As stated,
> The NFC and touch sensing functions are unavailable on NUCLEO board.

Touch function is indispensable in many authentication. While you can work around using a male to female jumper wire by linking the 3.3v pin and SB12 on the board when touch is required [^2] :
![](/assets/img/canokey_sb12.jpg)

Firmware is also required to be modified. Change the `GPIO_Touched()` and `device_periodic_task()` function in `Src/device.c` to 

```C++
static GPIO_PinState GPIO_Touched(void) {
#ifdef DEBUG_OUTPUT
  // Emulate touch events with UART input
  if (LL_LPUART_IsActiveFlag_RXNE(DBG_UART.Instance)) {
    int data = LL_LPUART_ReceiveData8(DBG_UART.Instance);
    // DBG_MSG("%x\n", data);
    if ('U' == data) return GPIO_PIN_SET;
  }
#endif
  uint32_t counter = 0;

  __disable_irq();
  // measure the time of discharging
  LL_GPIO_SetPinMode(TOUCH_GPIO_Port, TOUCH_Pin, GPIO_MODE_INPUT);
  while ((LL_GPIO_ReadInputPort(TOUCH_GPIO_Port) & TOUCH_Pin) /*  && counter <= touch_threshold */)
    ++counter;
  __enable_irq();

  if (counter > measure_touch) measure_touch = counter;
  return counter > touch_threshold ? GPIO_PIN_SET : GPIO_PIN_RESET;
}


void device_periodic_task(void) {
  if (GPIO_Touched()) set_touch_result(TOUCH_SHORT); 
  device_update_led();
}

```

You can also make your own USB breakout board, on which you can add a button to be the touch key.  

## Firmware 
I'm using Arch Linux to build the Firmware:
```
sudo pacman -S arm-none-eabi-gcc arm-none-eabi-newlib
git clone --recursive https://github.com/canokeys/canokey-stm32
cd canokey-stm32/ && mkdir build && cd build
cmake -DCROSS_COMPILE=/usr/bin/arm-none-eabi- \
      -DCMAKE_TOOLCHAIN_FILE=../toolchain.cmake \
      -DCMAKE_BUILD_TYPE=Release ..
make canokey.bin
```
Upload the `canokey.bin` to your development board. To initialize the Canokey, plug in your board [^3] and then execute:
```
cd ../utils/
./device-config-init.sh 'Canokeys Canokey [OpenPGP PIV OATH] (00000000) 00 00'
```
We are done here. Now you have a Canokey(STM32), use it to do something.


## OpenPGP
By default
- PIN: `123456`
- Admin PIN: `12345678`

I use Kleopatra to generate Key on Canokey. You can choose another way you preferred to generate.

You can sign commits using GPG key on Canokey, using:
```
git commit -a -S -m 'Signed commit'
```
Before that, you should config your git:
```
gpg -K --keyid-format long # To get the long-keyid of your key
git config --global user.signingkey LONG_KEYID
```
, export the public key and add it to Github:
```
gpg --armor --export LONG_KEYID
```

If you meet **The email in this signature doesnâ€™t match the committer email.**, try to change the commiter eamil:
```
git config --global user.email your.email@gpg.key
```
or add a new email address to your gpg key: [Associating an email with your GPG key
](https://docs.github.com/en/github/authenticating-to-github/associating-an-email-with-your-gpg-key).

If you want to sign every commit by default,
```
git config --global commit.gpgsign true
```

If you meet **error: gpg failed to sign the data**, which may be caused by no having `gtk2`. You should set `pinentry-program` in `~/.gnupg/gpg-agent.conf` [^4]
```
pinentry-program /usr/bin/pinentry-qt
```
or set the `GPG_TTY` environment variable for the pinentry programs. As I'm using fish,
```
set -Ux GPG_TTY (tty)
```

## OTP
Some websites (like Google, Github) support OTP as Two-factor authentication, you can use Canokey to secure and manage your OTP. 
To do so, just visit [Canokey Web Console](https://console.canokeys.org/oath) and connect your device. 
When adding a credential, the default config (for most websites) shoud be 
 - Key Encoding: Base32
 - Algorithm: HMAC-SHA1
 - Type: TOTP

After adding, you can click `Calculate TOTP` to get your OTP.


## FIDO2/U2F

You can set a PIN using Windows Hello. 

You can use your device to login website supporting WebAuthn.

You can also follow [this guide](https://wiki.archlinux.org/index.php/Universal_2nd_Factor) to authentication for Arch Linux.
```
ssh-keygen -t ecdsa-sk
```
will allow you to SSH with authentication from your Canokey. [Github](https://github.community/t/when-can-i-use-ssh-public-key-type-like-ed25519-sk-and-ecdsa-sk/3144) doesn't support `ecdsa-sk`.


## PIV 

By default
- PIN: `123456`
- PUK: `12345678`
- Management Key: `010203040506070801020304050607080102030405060708`

To manage and initialize the PIV function, you should install `yubico-piv-tool`, and execute
```
yubico-piv-tool -r canokeys -a set-chuid
yubico-piv-tool -r canokeys -a set-ccc
```
Don't forget `-r canokeys` when you encounter **Failed to connect to yubikey.** 


[^1]: You can follow this [guide](https://shawnhymel.com/1795/getting-started-with-stm32-nucleo-usb-virtual-com-port/).

[^2]: Which is safer since no one knows how to finish the touching except the readers.

[^3]: You can use `pcsc_scan` to make sure you have plugged in your board.

[^4]: Don't forget to reload `gpg-agent` using `gpg-connect-agent reloadagent /bye`.
